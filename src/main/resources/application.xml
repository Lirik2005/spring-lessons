<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- Используется для работы с файлом application.properties-->
    <context:property-placeholder location="application.properties"/>

    <!--Данная запись нужна, чтобы искать аннотацию @Component и создания бинов-->
    <context:component-scan base-package="org.example"/>

    <!-- Данный бин нужен, чтобы заработали аннотации @PostConstruct и @PreDestroy
    Но лучше использовать <context:annotation-config/>-->
    <!--    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>-->

    <!-- Бин PropertySourcesPlaceholderConfigurer используется для работы с файлом application.properties Однако сейчас так не делают и
    надо лишь подправить xml-шапку-->
    <!--  <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
          <property name="location" value="application.properties"/>
      </bean>-->

    <!-- Для заполнения value мы используем expression language и указываем на ключ из нашего application.properties-->
    <bean id="driver" class="java.lang.String">
        <constructor-arg type="java.lang.String" value="${db.driver}"/>
    </bean>

    <bean id="companyRepository" class="org.example.database.repository.CompanyRepository"/>
</beans>


<!--
<constructor-arg index="2" name="args" type="java.util.List">
<list>
    <value>&#45;&#45;arg1=value1</value>
    <value>&#45;&#45;arg2=value2</value>
    <ref bean="driver"/>
</list>
</constructor-arg>
<constructor-arg index="3" name="properties" type="java.util.Map">
<null/>
</constructor-arg>
<property name="properties">
<map>

    &lt;!&ndash; С помощью решетки мы вызываем spring expression language и уже можем писать код как в java &ndash;&gt;
    <entry key="url" value="postgresurl"/>
    <entry key="password" value="123"/>
    <entry key="driver" value="#{driver.substring(3)}"/>
    <entry key="test" value="#{driver.length()>10}"/>
    <entry key="test1" value="#{driver.length()>T(Math).random()*10}"/>
    <entry key="hosts" value="#{'${db.hosts}'.split(',')}"/>
    <entry key="currentuser" value="#{systemEnvironment['user.name']}"/>
</map>
</property>-->
